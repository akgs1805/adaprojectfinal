#include<stdio.h>
#include<stdlib.h>
#define INFINITY 9999
#define MAX 10
 
void dijkstra(int G[MAX][MAX],int n,int startnode,char *village[200]);
 
int main()
{
        int i,j,n,u,e;
        char *village[200];
        printf("\n\t\t*************************************\n");
        printf("\t\t  Welcome to Surya Narayana Agencies\n");
        printf("\t\t*************************************\n");
        printf("\t\t  Hello Executive! Have a GOOD day \n");
        printf("\n\nEnter no. of Villages:\n");
        scanf("%d",&n); 
                village[10]=(char*)malloc(25);
        village[0]= "Madhugiri";
        village[1]= "Hoskeri";
        village[2]= "Medigeshi";
        village[3]= "Bijavara";
        village[4]= "Garni";
        village[5]= "Yalkur";
        village[6]= "Purvara";
        village[7]= "ID halli";

        int G[MAX][MAX] = {
                 {00,13,21,04,22,24,14,30},
                 {13,00, 8,13, 9,11,24,17},
                 {21, 8,00,21, 9,15,32,14},
                 {04,13,21,00,21,15,12,20},
                 {22, 9, 9,21,00, 6,20,11},
                 {24,11,15,15, 6,00,14, 6},
                 {14,24,32,12,20,14,00,17},
                 {30,17,14,20,11, 6,17,00}};
        printf("***************************************\n\n");
        printf("List Of Villages\n");
        for(i=0;i<n;i++)
        {
                printf("%d :%s \n",i,village[i]);
        }
        printf("\n***************************************\n");
        printf("Enter the starting village index:");
        scanf("%d",&u);
        printf("\n***************************************\n");
        printf("THE DISTANCE MATRIX OF  VILLAGES IS \n");
        for(i=0;i<n;i++)
        {
                for(j=0;j<n;j++)
                        {
                                printf("%d\t",G[i][j]);
                        }
                printf("\n");
        }
        printf("\n***************************************\n");  
        dijkstra(G,n,u,village);
        fp=fopen("Output.html","x");
        //return to mozilla
        return 0;
}
 
void dijkstra(int G[MAX][MAX],int n,int startnode,char *village[200])
{
 
        int cost[MAX][MAX],distance[MAX],pred[MAX];
        int visited[MAX],count,mindistance,nextnode,i,j;

        //pred[] stores the predecessor of each node
        //count gives the number of nodes seen so far
        //create the cost matrix
        for(i=0;i<n;i++)
                for(j=0;j<n;j++)
                        if(G[i][j]==0)
                                cost[i][j]=INFINITY;
                        else
                                cost[i][j]=G[i][j];

        //initialize pred[],distance[] and visited[]
             for(i=0;i<n;i++)
        {
                distance[i]=cost[startnode][i];
                pred[i]=startnode;
                visited[i]=0;
        }

        distance[startnode]=0;
        visited[startnode]=1;
        count=1;

        while(count<n-1)
        {
                mindistance=INFINITY;

                //nextnode gives the node at minimum distance
                for(i=0;i<n;i++)
                        if(distance[i]<mindistance&&!visited[i])
                        {
                                mindistance=distance[i];
                                    nextnode=i;
                        }

                        //check if a better path exists through nextnode
                        visited[nextnode]=1;
                        for(i=0;i<n;i++)
                                if(!visited[i])
                                        if(mindistance+cost[nextnode][i]<distance[i])
                                        {
                                                distance[i]=mindistance+cost[nextnode][i];
                                                pred[i]=nextnode;
                                        }
                count++;
        }


        //print the path and distance of each node
        for(i=0;i<n;i++)
                if(i!=startnode)
                {
                     printf("\n***************************************\n\n");
                        printf("Distance of village %s=%d",village[i],distance[i]);
                        printf("\nPath=%s",village[i]);

                        j=i;
                        do
                        {
                                j=pred[j];
                                printf("<-%s",village[j]);
                        }while(j!=startnode);
                        printf("\n\n***************************************\n");
                }
                printf("\n Total Number of Routes For the Day:%d\n",n-1);


}


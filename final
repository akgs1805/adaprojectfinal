#include<stdio.h>
#include<stdlib.h>
#define INFINITY 9999
#define MAX 10
 
void dijkstra(int G[MAX][MAX],int n,int startnode,char *village[200]);
 
int main()
{
        int G[MAX][MAX],i,j,n,u;
        char *village[200];      
        printf("\n\t\t*************************************\n");
        printf("\t\t  Welcome to Surya Narayana Agencies\n");
        printf("\t\t*************************************\n");
        printf("\t\t  Hello Executive! Have a GOOD day \n");
        printf("\n\nEnter no. of Villages:\n");
        scanf("%d",&n); 
        printf("Enter the list of villages (excluding MADHUGIRI):\n");
        for(i=1;i<n;i++)
        {
                village[i]=(char*)malloc(25);
                scanf("%s",village[i]);
        }
        village[0]="Madhugiri";
        printf("\nEnter the Distance of Villages [Adjacency Matrix]:\n");

        for(i=0;i<n;i++)
                for(j=0;j<n;j++)
                        scanf("%d",&G[i][j]);
        printf("***************************************\n\n");
        printf("List Of Villages\n");
        for(i=0;i<n;i++)
        {
                printf("%d :%s \n",i,village[i]);
        }
        printf("\n***************************************\n");
        printf("Enter the starting village index:");
 dijkstra(G,n,u,village);
        return 0;
}
 
void dijkstra(int G[MAX][MAX],int n,int startnode,char *village[200])
{
 
        int cost[MAX][MAX],distance[MAX],pred[MAX];
        int visited[MAX],count,mindistance,nextnode,i,j;

        //pred[] stores the predecessor of each node
        //count gives the number of nodes seen so far
        //create the cost matrix
        for(i=0;i<n;i++)
                for(j=0;j<n;j++)
                        if(G[i][j]==0)
                                cost[i][j]=INFINITY;
                        else
                       cost[i][j]=G[i][j];

        //initialize pred[],distance[] and visited[]
        for(i=0;i<n;i++)
        {
                distance[i]=cost[startnode][i];
                pred[i]=startnode;
                visited[i]=0;
        }

        distance[startnode]=0;
        visited[startnode]=1;
        count=1;

        while(count<n-1)
        {
                mindistance=INFINITY;

                //nextnode gives the node at minimum distance
                for(i=0;i<n;i++)
                    if(distance[i]<mindistance&&!visited[i])
                        {
                                mindistance=distance[i];
                                nextnode=i;
                        }

                        //check if a better path exists through nextnode
                        visited[nextnode]=1;
                        for(i=0;i<n;i++)
                                if(!visited[i])
                                        if(mindistance+cost[nextnode][i]<distance[i])
                                        {
                                                distance[i]=mindistance+cost[nextnode][i];
                                                pred[i]=nextnode;
                                        }
                count++;
        }


        //print the path and distance of each node
        for(i=0;i<n;i++)
                if(i!=startnode)
                {
                        printf("\n***************************************\n\n");
                        printf("Distance of village %s=%d",village[i],distance[i]);
                        printf("\nPath=%s",village[i]);

                        j=i;
                        do
                        {
                                j=pred[j];
                                printf("<-%s",village[j]);
                        }while(j!=startnode);
                        printf("\n\n***************************************\n");
                }
                printf("\n Total Number of Routes For the Day:%d\n",n-1);


}
